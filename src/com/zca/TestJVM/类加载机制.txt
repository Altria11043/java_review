--->这里是直接抄的教学视频中的课件, 要了解需要自行查找相关资料<---
- JVM把class文件加载到内存, 并对数据进行校验, 解析和初始化,
    最终形成JVM可以直接使用的java类型的过程
- 加载
    将class文件字节码内容加载到内存中, 并将这些静态数据转换成方法区中的运行时的数据结果,
    在堆中生成一个代码表这个类的java.lang.Class对象, 作为方法区类数据的访问入口.
- 连接 将Java类的二进制代码合并到JVM的运行状态之中的过程
    1. 验证:
        - 确保加载的类信息符合JVM规范, 没有安全方面的问题
    2. 准备:
        - 正式为变量(static变量)分配内存并设置类变量初始值的阶段, 这些内存都将在方法区中进行分配
    3. 解析:
        - 虚拟机常量池的符号引用替换为直接引用的过程
- 初始化
    1. 初始化阶段是执行类构造器<clinit>()方法的过程, 类构造器<clinit>()方法是由编译器自动收集
        类中的所有类变量的赋值动作和静态语句块(static块)中的语句合并产生的.
    2. 当初始化一个类的时候, 如果发现其父类还没有进行过初始化, 则需要先出发其父类的初始化
    3. 虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步.
    4. 当访问一个java类的静态域时, 只有真正声明这个域的类次啊会被初始化.